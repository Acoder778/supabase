[
  {
    "name": "address_standardizer",
    "comment": "Used to parse an address into constituent elements. Generally used to support geocoding address normalization step."
  },
  {
    "name": "address_standardizer-3",
    "comment": "Used to parse an address into constituent elements. Generally used to support geocoding address normalization step."
  },
  {
    "name": "address_standardizer_data_us",
    "comment": "Address Standardizer US dataset example"
  },
  {
    "name": "address_standardizer_data_us-3",
    "comment": "Address Standardizer US dataset example"
  },
  {
    "name": "adminpack",
    "comment": "administrative functions for PostgreSQL"
  },
  {
    "name": "amcheck",
    "comment": "functions for verifying relation integrity"
  },
  {
    "name": "autoinc",
    "comment": "functions for autoincrementing fields"
  },
  {
    "name": "bloom",
    "comment": "bloom access method - signature file based index"
  },
  {
    "name": "btree_gin",
    "comment": "support for indexing common datatypes in GIN"
  },
  {
    "name": "btree_gist",
    "comment": "support for indexing common datatypes in GiST"
  },
  {
    "name": "citext",
    "comment": "data type for case-insensitive character strings"
  },
  {
    "name": "cube",
    "comment": "data type for multidimensional cubes"
  },
  {
    "name": "dblink",
    "comment": "connect to other PostgreSQL databases from within a database"
  },
  {
    "name": "dict_int",
    "comment": "text search dictionary template for integers"
  },
  {
    "name": "dict_xsyn",
    "comment": "text search dictionary template for extended synonym processing"
  },
  {
    "name": "earthdistance",
    "comment": "calculate great-circle distances on the surface of the Earth"
  },
  {
    "name": "file_fdw",
    "comment": "foreign-data wrapper for flat file access"
  },
  {
    "name": "fuzzystrmatch",
    "comment": "determine similarities and distance between strings"
  },
  {
    "name": "hstore",
    "comment": "data type for storing sets of (key, value) pairs"
  },
  {
    "name": "http",
    "comment": "HTTP client for PostgreSQL, allows web page retrieval inside the database."
  },
  {
    "name": "insert_username",
    "comment": "functions for tracking who changed a table"
  },
  {
    "name": "intagg",
    "comment": "integer aggregator and enumerator (obsolete)"
  },
  {
    "name": "intarray",
    "comment": "functions, operators, and index support for 1-D arrays of integers"
  },
  {
    "name": "isn",
    "comment": "data types for international product numbering standards"
  },
  {
    "name": "lo",
    "comment": "Large Object maintenance"
  },
  {
    "name": "ltree",
    "comment": "data type for hierarchical tree-like structures"
  },
  {
    "name": "moddatetime",
    "comment": "functions for tracking last modification time"
  },
  {
    "name": "pageinspect",
    "comment": "inspect the contents of database pages at a low level"
  },
  {
    "name": "pg_buffercache",
    "comment": "examine the shared buffer cache"
  },
  {
    "name": "pg_cron",
    "comment": "Job scheduler for PostgreSQL"
  },
  {
    "name": "pg_freespacemap",
    "comment": "examine the free space map (FSM)"
  },
  {
    "name": "pg_prewarm",
    "comment": "prewarm relation data"
  },
  {
    "name": "pg_stat_statements",
    "comment": "track execution statistics of all SQL statements executed"
  },
  {
    "name": "pg_trgm",
    "comment": "text similarity measurement and index searching based on trigrams"
  },
  {
    "name": "pg_visibility",
    "comment": "examine the visibility map (VM) and page-level visibility info"
  },
  {
    "name": "pgaudit",
    "comment": "provides auditing functionality"
  },
  {
    "name": "pgcrypto",
    "comment": "cryptographic functions"
  },
  {
    "name": "pgjwt",
    "comment": "JSON Web Token API for Postgresql"
  },
  {
    "name": "pgrowlocks",
    "comment": "show row-level locking information"
  },
  {
    "name": "pgstattuple",
    "comment": "show tuple-level statistics"
  },
  {
    "name": "pgtap",
    "comment": "Unit testing for PostgreSQL"
  },
  {
    "name": "plcoffee",
    "comment": "PL/CoffeeScript (v8) trusted procedural language"
  },
  {
    "name": "pljava",
    "comment": "PL/Java procedural language (https://tada.github.io/pljava/)"
  },
  {
    "name": "plls",
    "comment": "PL/LiveScript (v8) trusted procedural language"
  },
  {
    "name": "plpgsql",
    "comment": "PL/pgSQL procedural language"
  },
  {
    "name": "plpgsql_check",
    "comment": "extended check for plpgsql functions"
  },
  {
    "name": "plv8",
    "comment": "PL/JavaScript (v8) trusted procedural language"
  },
  {
    "name": "postgis",
    "comment": "PostGIS geometry and geography spatial types and functions"
  },
  {
    "name": "postgis-3",
    "comment": "PostGIS geometry and geography spatial types and functions"
  },
  {
    "name": "postgis_raster",
    "comment": "PostGIS raster types and functions"
  },
  {
    "name": "postgis_raster-3",
    "comment": "PostGIS raster types and functions"
  },
  {
    "name": "postgis_sfcgal",
    "comment": "PostGIS SFCGAL functions"
  },
  {
    "name": "postgis_sfcgal-3",
    "comment": "PostGIS SFCGAL functions"
  },
  {
    "name": "postgis_tiger_geocoder",
    "comment": "PostGIS tiger geocoder and reverse geocoder"
  },
  {
    "name": "postgis_tiger_geocoder-3",
    "comment": "PostGIS tiger geocoder and reverse geocoder"
  },
  {
    "name": "postgis_topology",
    "comment": "PostGIS topology spatial types and functions"
  },
  {
    "name": "postgis_topology-3",
    "comment": "PostGIS topology spatial types and functions"
  },
  {
    "name": "postgres_fdw",
    "comment": "foreign-data wrapper for remote PostgreSQL servers"
  },
  {
    "name": "refint",
    "comment": "functions for implementing referential integrity (obsolete)"
  },
  {
    "name": "seg",
    "comment": "data type for representing line segments or floating-point intervals"
  },
  {
    "name": "sslinfo",
    "comment": "information about SSL certificates"
  },
  {
    "name": "tablefunc",
    "comment": "functions that manipulate whole tables, including crosstab"
  },
  {
    "name": "tcn",
    "comment": "Triggered change notifications"
  },
  {
    "name": "tsm_system_rows",
    "comment": "TABLESAMPLE method which accepts number of rows as a limit"
  },
  {
    "name": "tsm_system_time",
    "comment": "TABLESAMPLE method which accepts time in milliseconds as a limit"
  },
  {
    "name": "unaccent",
    "comment": "text search dictionary that removes accents"
  },
  {
    "name": "uuid-ossp",
    "comment": "generate universally unique identifiers (UUIDs)"
  },
  {
    "name": "vector",
    "comment": "vector data type with similarity search"
  },
  {
    "name": "xml2",
    "comment": "XPath querying and XSLT"
  },
  {
    "name": "rum",
    "comment": "GIN-like index for text search"
  },
  {
    "name": "pg_repack",
    "comment": "optimize physical storage and remove bloat from tables and indexes"
  }
]
